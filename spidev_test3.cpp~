#include <fcntl.h>				//Needed for SPI port
#include <sys/ioctl.h>			//Needed for SPI port
#include <linux/spi/spidev.h>	//Needed for SPI port
#include <unistd.h>			//Needed for SPI port
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <iostream>
#include <unistd.h>
#include <cstring>
#include <getopt.h> //getopt_log, struct option

int spi_cs0_fd;				//file descriptor for the SPI device
int spi_cs1_fd;				//file descriptor for the SPI device
unsigned char spi_mode;
unsigned char spi_bitsPerWord;
unsigned int spi_speed= 2000000;		//2000000 = 2MHz (1uS per bit) 
int spi_dev;
/*unsigned*/ char data = 'A';


//***********************************
//***********************************
//********** SPI OPEN PORT **********
//***********************************
//***********************************
//spi_device0=CS0, 1=CS1
int SpiOpenPort (int spi_device)
{
    int status_value = -1;
    int *spi_cs_fd;


    //----- SET SPI MODE -----
    //SPI_MODE_0 (0,0) 	CPOL = 0, CPHA = 0, Clock idle low, data is clocked in on rising edge, output data (change) on falling edge
    //SPI_MODE_1 (0,1) 	CPOL = 0, CPHA = 1, Clock idle low, data is clocked in on falling edge, output data (change) on rising edge
    //SPI_MODE_2 (1,0) 	CPOL = 1, CPHA = 0, Clock idle high, data is clocked in on falling edge, output data (change) on rising edge
    //SPI_MODE_3 (1,1) 	CPOL = 1, CPHA = 1, Clock idle high, data is clocked in on rising, edge output data (change) on falling edge
    spi_mode = SPI_MODE_0;
    
    //----- SET BITS PER WORD -----
    spi_bitsPerWord = 8;
    
    //----- SET SPI BUS SPEED -----
    //spi_speed = 1000000;		//1000000 = 1MHz (1uS per bit) 
    //spi_speed = 2000000;		//2000000 = 2MHz (1uS per bit) 

    if (spi_device)
    	spi_cs_fd = &spi_cs1_fd;
    else
    	spi_cs_fd = &spi_cs0_fd;


    if (spi_device)
    	*spi_cs_fd = open(std::string("/dev/spidev0.1").c_str(), O_RDWR);
    else
    	*spi_cs_fd = open(std::string("/dev/spidev0.0").c_str(), O_RDWR);

    if (*spi_cs_fd < 0)
    {
        perror("Error - Could not open SPI device");
        exit(1);
    }

    status_value = ioctl(*spi_cs_fd, SPI_IOC_WR_MODE, &spi_mode);
    if(status_value < 0)
    {
        perror("Could not set SPIMode (WR)...ioctl fail");
        exit(1);
    }

    status_value = ioctl(*spi_cs_fd, SPI_IOC_RD_MODE, &spi_mode);
    if(status_value < 0)
    {
      perror("Could not set SPIMode (RD)...ioctl fail");
      exit(1);
    }

    status_value = ioctl(*spi_cs_fd, SPI_IOC_WR_BITS_PER_WORD, &spi_bitsPerWord);
    if(status_value < 0)
    {
      perror("Could not set SPI bitsPerWord (WR)...ioctl fail");
      exit(1);
    }

    status_value = ioctl(*spi_cs_fd, SPI_IOC_RD_BITS_PER_WORD, &spi_bitsPerWord);
    if(status_value < 0)
    {
      perror("Could not set SPI bitsPerWord(RD)...ioctl fail");
      exit(1);
    }

    status_value = ioctl(*spi_cs_fd, SPI_IOC_WR_MAX_SPEED_HZ, &spi_speed);
    if(status_value < 0)
    {
      perror("Could not set SPI speed (WR)...ioctl fail");
      exit(1);
    }

    status_value = ioctl(*spi_cs_fd, SPI_IOC_RD_MAX_SPEED_HZ, &spi_speed);
    if(status_value < 0)
    {
      perror("Could not set SPI speed (RD)...ioctl fail");
      exit(1);
    }
    return(status_value);
}



//************************************
//************************************
//********** SPI CLOSE PORT **********
//************************************
//************************************
int SpiClosePort (int spi_device)
{
	int status_value = -1;
    int *spi_cs_fd;

    if (spi_device)
    	spi_cs_fd = &spi_cs1_fd;
    else
    	spi_cs_fd = &spi_cs0_fd;


    status_value = close(*spi_cs_fd);
    if(status_value < 0)
    {
    	perror("Error - Could not close SPI device");
    	exit(1);
    }
    return(status_value);
}



//*******************************************
//*******************************************
//********** SPI WRITE & READ DATA **********
//*******************************************
//*******************************************
//data		Bytes to write.  Contents is overwritten with bytes read.
int SpiWriteAndRead (int spi_device, /*unsigned*/ char *data, int length)
//int SpiWriteAndRead (int spi_device, unsigned char data, int length)  
{
    struct spi_ioc_transfer spi[length];
    int i = 0;
    int retVal = -1;
    int *spi_cs_fd;

    if (spi_device)
    	spi_cs_fd = &spi_cs1_fd;
    else
    	spi_cs_fd = &spi_cs0_fd;

	//one spi transfer for each byte

	for (i = 0 ; i < length ; i++)
	{
		memset(&spi[i], 0, sizeof (spi[i]));
		spi[i].tx_buf        = (unsigned long)(data + i); // transmit from "data"
		spi[i].rx_buf        = (unsigned long)(data + i) ; // receive into "data"
		spi[i].len           = sizeof(*(data + i)) ;
		spi[i].delay_usecs   = 0 ;
		spi[i].speed_hz      = spi_speed ;
		spi[i].bits_per_word = spi_bitsPerWord ;
		spi[i].cs_change = 0;
	}

	retVal = ioctl(*spi_cs_fd, SPI_IOC_MESSAGE(length), &spi) ;

	if(retVal < 0)
	{
		perror("Error - Problem transmitting spi data..ioctl");
		exit(1);
	}

	return retVal;
}

static void parse_opts(int argc, char *argv[])
{
  while(1)
    {
      static const struct option lopts[] =
	{
	  {"device",1,0,'D'},
	  {"data",1,0,'d'},
	  {"speed",1,0,'s'},
	  {NULL,0,0,0},
	};

      int c;
      c = getopt_long(argc,argv,"D:d:s:",lopts,NULL);

      if(c==-1)
	break;

      switch (c)
	{
	case 'D':
	  //spi_dev = optarg;
	  //std::cout<<"b4 spi_dev is "<<spi_dev<<"\n";
	  spi_dev = atoi(optarg);
	  //std::cout<<"optarg is "<<atoi(optarg)<<"\n";
	  //std::cout<<"af spi_dev is "<<spi_dev<<"\n";
	  break;
	case 'd':
	  //std::cout<<"b4 data is "<<data<<"\n";
	  data = *optarg;
	  //std::cout<<"optarg is "<<optarg<<"\n";
	  //std::cout<<"*optarg is "<<*optarg<<"\n";
	  //std::cout<<"af data is "<<data<<"\n";
	  break;
	case 's':
	  spi_speed = atoi(optarg);
	  break;
	default:
	  //print_usage(argv[0]);
	  perror("Error - Invalid execution argument");
	  break;
	}
    }
}

int main(int argc, char *argv[])
{
  //unsigned char data = 'A';
  //unsigned char name = 'Al';
  //char name[4] = "Alex";
  //char name[] = {'A','l','e','x'};
  //std::cout<<"Begining the program \n";
  
  parse_opts(argc,argv);
  
  //perror("Begining the program");
  //std::cout<<"spi_dev is "<<spi_dev<<"\n";

  if (spi_dev)
     std::cout<<"RPi spi device is /dev/spidev0.1 \n";
  else
     std::cout<<"RPi spi device is /dev/spidev0.0 \n";

  std::cout<<"RPi spi speed is "<<spi_speed<<"Hz, "<<(spi_speed/1000)<<"KHz, "<<(spi_speed/1000000)<<"MHz \n";
  SpiOpenPort (spi_dev);

  std::cout<<"B4 data passed is "<<data<<" \n";
  SpiWriteAndRead (spi_dev,&data,1);
  std::cout<<"AF data passed is "<<data<<" \n";
  //SpiWriteAndRead (spi_dev,'A',1);
  SpiClosePort (spi_dev);

  return 0;
}

